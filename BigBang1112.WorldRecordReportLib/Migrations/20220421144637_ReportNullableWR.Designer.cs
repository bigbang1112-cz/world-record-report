// <auto-generated />
using System;
using BigBang1112.WorldRecordReportLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BigBang1112.WorldRecordReportLib.Migrations
{
    [DbContext(typeof(WrContext))]
    [Migration("20220421144637_ReportNullableWR")]
    partial class ReportNullableWR
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.AltReplayModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Checksum")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("WorldRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorldRecordId")
                        .IsUnique();

                    b.ToTable("AltReplays");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.AssociatedAccountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("AssociatedAccounts");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.CampaignModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOver")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LeaderboardUid")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.DiscordWebhookMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("RemovedByUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RemovedOfficially")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime");

                    b.Property<int>("WebhookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("WebhookId");

                    b.ToTable("DiscordWebhookMessages");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.DiscordWebhookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Filter")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Scope")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("DiscordWebhooks");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.EnvModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Color")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varbinary(3)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name2")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Environments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = new byte[] { 255, 205, 50 },
                            Name = "Desert",
                            Name2 = "Speed"
                        },
                        new
                        {
                            Id = 2,
                            Color = new byte[] { 235, 246, 247 },
                            Name = "Snow",
                            Name2 = "Alpine"
                        },
                        new
                        {
                            Id = 3,
                            Color = new byte[] { 0, 183, 107 },
                            Name = "Rally"
                        },
                        new
                        {
                            Id = 4,
                            Color = new byte[] { 62, 221, 211 },
                            Name = "Island"
                        },
                        new
                        {
                            Id = 5,
                            Color = new byte[] { 39, 75, 206 },
                            Name = "Bay"
                        },
                        new
                        {
                            Id = 6,
                            Color = new byte[] { 255, 2, 141 },
                            Name = "Coast"
                        },
                        new
                        {
                            Id = 7,
                            Color = new byte[] { 62, 89, 119 },
                            Name = "Stadium"
                        },
                        new
                        {
                            Id = 8,
                            Color = new byte[] { 239, 89, 0 },
                            Name = "Canyon"
                        },
                        new
                        {
                            Id = 9,
                            Color = new byte[] { 34, 247, 101 },
                            Name = "Valley"
                        },
                        new
                        {
                            Id = 10,
                            Color = new byte[] { 38, 211, 255 },
                            Name = "Lagoon"
                        },
                        new
                        {
                            Id = 11,
                            Color = new byte[] { 0, 191, 127 },
                            DisplayName = "Stadium 2020",
                            Name = "Stadium2020"
                        });
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Trackmania²",
                            Name = "TM2"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Trackmania United Forever",
                            Name = "TMUF"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Trackmania Nations Forever",
                            Name = "TMNF"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Trackmania United",
                            Name = "TMU"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Trackmania Sunrise",
                            Name = "TMS"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Trackmania Nations ESWC",
                            Name = "TMN"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Trackmania Original",
                            Name = "TMO"
                        },
                        new
                        {
                            Id = 8,
                            DisplayName = "Trackmania®",
                            Name = "TM2020"
                        });
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.IgnoredLoginFromMapModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("IgnoredOn")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.HasIndex("MapId");

                    b.ToTable("IgnoredLoginsFromMaps");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.IgnoredLoginFromRemovedRecordReportModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("IgnoredLoginsFromRemovedRecordReport");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.IgnoredLoginModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("IgnoredOn")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("IgnoredLogins");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastNicknameChangeOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastSeenOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Name");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("TitlePackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TitlePackId");

                    b.ToTable("MapGroups");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Checksum")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("DeformattedName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("DownloadGuid")
                        .HasColumnType("char(36)");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FileLastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("IntendedGameId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastActivityOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MapId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MapStyle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MapType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MapUid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("ModeId")
                        .HasColumnType("int");

                    b.Property<int?>("MxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ThumbnailGuid")
                        .HasColumnType("char(36)");

                    b.Property<int?>("TitlePackId")
                        .HasColumnType("int");

                    b.Property<int?>("TmxAuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("GameId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IntendedGameId");

                    b.HasIndex("MapUid");

                    b.HasIndex("ModeId");

                    b.HasIndex("TitlePackId");

                    b.HasIndex("TmxAuthorId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapModeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("MapModes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Race"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stunts"
                        });
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.NicknameChangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("Previous")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PreviousLastSeenOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("NicknameChanges");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordCountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Before")
                        .HasColumnType("datetime");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("RecordCounts2");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordChangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short>("Count")
                        .HasColumnType("smallint");

                    b.Property<bool>("NewRecord")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RecordSetChangeId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordSetChangeId");

                    b.ToTable("RecordChanges");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordSetDetailedChangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DrivenBefore")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DrivenOn")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("ReplayUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.HasIndex("MapId");

                    b.ToTable("RecordSetDetailedChanges");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordSetChangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DrivenAfter")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DrivenBefore")
                        .HasColumnType("datetime");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("RecordSetChanges");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RefreshLoopModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("StartingRefreshId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StartingRefreshId");

                    b.ToTable("RefreshLoops");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RefreshModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int?>("MapGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("NextRefreshId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Ready")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RefreshLoopId")
                        .HasColumnType("int");

                    b.Property<int?>("TmxLoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapGroupId");

                    b.HasIndex("NextRefreshId");

                    b.HasIndex("RefreshLoopId");

                    b.HasIndex("TmxLoginId");

                    b.ToTable("Refreshes");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.ReportModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("HappenedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("RemovedWorldRecordId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WorldRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RemovedWorldRecordId");

                    b.HasIndex("WorldRecordId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TitlePackModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("TitlePacks");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TmxInitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("TmxInits");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TmxLoginModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastSeenOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Nickname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("TmxLogins");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TmxSiteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TmxSites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShortName = "nations",
                            Url = "http://nations.tm-exchange.com/"
                        },
                        new
                        {
                            Id = 2,
                            ShortName = "united",
                            Url = "https://united.tm-exchange.com/"
                        },
                        new
                        {
                            Id = 3,
                            ShortName = "tmnf",
                            Url = "https://tmnforever.tm-exchange.com/"
                        },
                        new
                        {
                            Id = 4,
                            ShortName = "tm2",
                            Url = "https://tm.mania-exchange.com/"
                        },
                        new
                        {
                            Id = 5,
                            ShortName = "trackmania",
                            Url = "https://trackmania.exchange/"
                        });
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DrivenOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ignored")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManialinkRecord")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousWorldRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReplayId")
                        .HasColumnType("int");

                    b.Property<string>("ReplayUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int?>("TmxPlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("Unverified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PreviousWorldRecordId");

                    b.HasIndex("TmxPlayerId");

                    b.ToTable("WorldRecords");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.AltReplayModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", "WorldRecord")
                        .WithOne("AltReplay")
                        .HasForeignKey("BigBang1112.WorldRecordReportLib.Models.Db.AltReplayModel", "WorldRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorldRecord");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.CampaignModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.DiscordWebhookMessageModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.ReportModel", "Report")
                        .WithMany("DiscordWebhookMessages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.DiscordWebhookModel", "Webhook")
                        .WithMany("Messages")
                        .HasForeignKey("WebhookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Webhook");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.DiscordWebhookModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.AssociatedAccountModel", "Account")
                        .WithMany("DiscordWebhooks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.IgnoredLoginFromMapModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.IgnoredLoginModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", "Game")
                        .WithMany("Logins")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapGroupModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TitlePackModel", "TitlePack")
                        .WithMany("MapGroups")
                        .HasForeignKey("TitlePackId");

                    b.Navigation("Game");

                    b.Navigation("TitlePack");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.CampaignModel", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.EnvModel", "Environment")
                        .WithMany("Maps")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapGroupModel", "Group")
                        .WithMany("Maps")
                        .HasForeignKey("GroupId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", "IntendedGame")
                        .WithMany()
                        .HasForeignKey("IntendedGameId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapModeModel", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TitlePackModel", "TitlePack")
                        .WithMany("Maps")
                        .HasForeignKey("TitlePackId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TmxLoginModel", "TmxAuthor")
                        .WithMany()
                        .HasForeignKey("TmxAuthorId");

                    b.Navigation("Author");

                    b.Navigation("Campaign");

                    b.Navigation("Environment");

                    b.Navigation("Game");

                    b.Navigation("Group");

                    b.Navigation("IntendedGame");

                    b.Navigation("Mode");

                    b.Navigation("TitlePack");

                    b.Navigation("TmxAuthor");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.NicknameChangeModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordCountModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", "Map")
                        .WithMany("RecordCounts")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordChangeModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.RecordSetChangeModel", "RecordSetChange")
                        .WithMany("RecordChanges")
                        .HasForeignKey("RecordSetChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordSetChange");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordSetDetailedChangeModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", "Map")
                        .WithMany("RecordSetDetailedChanges")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordSetChangeModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", "Map")
                        .WithMany("RecordSetChanges")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RefreshLoopModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.RefreshModel", "StartingRefresh")
                        .WithMany()
                        .HasForeignKey("StartingRefreshId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartingRefresh");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RefreshModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapGroupModel", "MapGroup")
                        .WithMany()
                        .HasForeignKey("MapGroupId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.RefreshModel", "NextRefresh")
                        .WithMany()
                        .HasForeignKey("NextRefreshId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.RefreshLoopModel", "RefreshLoop")
                        .WithMany("Refreshes")
                        .HasForeignKey("RefreshLoopId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TmxLoginModel", "TmxLogin")
                        .WithMany()
                        .HasForeignKey("TmxLoginId");

                    b.Navigation("MapGroup");

                    b.Navigation("NextRefresh");

                    b.Navigation("RefreshLoop");

                    b.Navigation("TmxLogin");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.ReportModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", "RemovedWorldRecord")
                        .WithMany()
                        .HasForeignKey("RemovedWorldRecordId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", "WorldRecord")
                        .WithMany()
                        .HasForeignKey("WorldRecordId");

                    b.Navigation("RemovedWorldRecord");

                    b.Navigation("WorldRecord");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TitlePackModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TmxInitModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TmxLoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TmxLoginModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TmxSiteModel", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", b =>
                {
                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", "Map")
                        .WithMany("WorldRecords")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.LoginModel", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", "PreviousWorldRecord")
                        .WithMany()
                        .HasForeignKey("PreviousWorldRecordId");

                    b.HasOne("BigBang1112.WorldRecordReportLib.Models.Db.TmxLoginModel", "TmxPlayer")
                        .WithMany()
                        .HasForeignKey("TmxPlayerId");

                    b.Navigation("Map");

                    b.Navigation("Player");

                    b.Navigation("PreviousWorldRecord");

                    b.Navigation("TmxPlayer");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.AssociatedAccountModel", b =>
                {
                    b.Navigation("DiscordWebhooks");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.DiscordWebhookModel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.EnvModel", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.GameModel", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapGroupModel", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.MapModel", b =>
                {
                    b.Navigation("RecordCounts");

                    b.Navigation("RecordSetChanges");

                    b.Navigation("RecordSetDetailedChanges");

                    b.Navigation("WorldRecords");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RecordSetChangeModel", b =>
                {
                    b.Navigation("RecordChanges");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.RefreshLoopModel", b =>
                {
                    b.Navigation("Refreshes");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.ReportModel", b =>
                {
                    b.Navigation("DiscordWebhookMessages");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.TitlePackModel", b =>
                {
                    b.Navigation("MapGroups");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("BigBang1112.WorldRecordReportLib.Models.Db.WorldRecordModel", b =>
                {
                    b.Navigation("AltReplay");
                });
#pragma warning restore 612, 618
        }
    }
}
