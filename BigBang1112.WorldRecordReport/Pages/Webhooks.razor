@page "/webhooks"
@page "/webhooks/{id:guid}"

@using BigBang1112.WorldRecordReportLib.Models.ReportScopes;

@attribute [Authorize]

@inject WrAuthService WrAuthService
@inject AccountService AccountService
@inject NavigationManager NavManager
@inject IWrUnitOfWork WrUnitOfWork
@inject IDiscordWebhookService DiscordWebhookService
@inject ILogger<Webhooks> Logger
@inject IJSRuntime JS

<div style="margin: 1rem">
    <h2 style="margin-bottom:1rem">Webhooks</h2>

    <div style="display:flex">
        @if (webhooks?.Any() == true)
        {
            <div style="width: 40%;padding-right:1rem">
                <ul>
                    @foreach (var webhook in webhooks)
                    {
                        <li style="display:flex">
                            <Checkbox Checked="!webhook.Disabled" Style="width:3rem" CheckedChanged="enabled => UpdateEnableAsync(webhook.Guid, enabled)"></Checkbox>
                            <a href="webhooks/@webhook.Guid" class="button button-flex" style="justify-content: left" @onclick="() => IsCreate = false">
                                <img class="icon" src="_content/BigBang1112.Essentials.Razor/img/discord_mini.png" style="width: 1rem;margin-left: 1rem" />
                                <span style="margin-left: 1rem">@webhook.DisplayName</span>
                            </a>
                            <button class="button" style="width:3rem" @onclick="() => PingWebhookAsync(webhook.Guid)">
                                <i class="fas fa-bell"></i>
                            </button>
                            <button class="button" style="width:3rem" @onclick="() => AskToDeleteWebhookAsync(webhook.Guid, webhook.DisplayName ?? webhook.Guid.ToString())">
                                <i class="fa-solid fa-trash-can"></i>
                            </button>
                        </li>
                    }

                    @if (!IsCreate)
                    {
                        <li style="margin-top:0.5rem">
                            <a href="webhooks" class="button @(webhooks.Count >= 5 ? "disabled" : "")" @onclick="() => IsCreate = true">Create a new webhook</a>
                        </li>
                    }
                </ul>
            </div>
        }
        else if (!IsCreate)
        {
            <div style="width: 40%">
                <button class="button" @onclick="() => IsCreate = true">Create a new webhook</button>
            </div>
        }
        <div style="width: 60%;">
            @if (IsCreate)
            {
                <table style="width: 100%;">
					<colgroup>
						<col style="width:15rem"/>
						<col />
					</colgroup>
					<tbody>
						<tr>
							<td>Display name:</td>
							<td><input type="text" class="textbox" @bind="DisplayNameOnCreate" style="@(string.IsNullOrWhiteSpace(DisplayNameOnCreate) ? "background-color: indianred" : "")" /></td>
						</tr>
						<tr>
							<td>Webhook URL:</td>
							<td><input type="password" class="textbox" @bind="WebhookUrlOnCreate" style="@(string.IsNullOrWhiteSpace(WebhookUrlOnCreate) ? "background-color: indianred" : "")" /></td>
						</tr>
					</tbody>
				</table>
                <div style="font-size: 0.8rem;background-color: rgba(41,42,45);border-radius: 0.3rem;margin:0.2rem 0;padding:0.7rem 1rem;text-align:center">Ticked means that you will receive reports from this scope.<br/>If you just tick a parent scope without ticking any of the children scopes, you will receive all reports from its child scopes.</div>
                <ReportScopeSetRenderer Object="ScopeSet"></ReportScopeSetRenderer>
                <button class="button" disabled="@(webhooks?.Count >= 5)" @onclick="CreateWebhookAsync">Create a new webhook</button>
            }
            else if (Webhook is not null)
            {
                <table style="width: 100%;">
					<colgroup>
						<col style="width:15rem"/>
						<col />
					</colgroup>
					<tbody>
						<tr>
							<td>Webhook UUID:</td>
							<td><small style="font-size: 1rem">@Webhook.Guid</small></td>
						</tr>
						<tr>
							<td>Display name:</td>
							<td><input type="text" class="textbox" @bind="Webhook.DisplayName" style="@(string.IsNullOrWhiteSpace(Webhook.DisplayName) ? "background-color: indianred" : "")" /></td>
						</tr>
						<tr>
							<td>Webhook URL:</td>
							<td><input type="password" class="textbox" @bind="Webhook.Url" style="@(string.IsNullOrWhiteSpace(Webhook.Url) ? "background-color: indianred" : "")" /></td>
						</tr>
					</tbody>
				</table>
                @if (Webhook.Scope is null)
                {
                    <div style="font-size: 0.8rem;background-color: rgba(41,42,45);border-radius: 0.3rem;margin:0.2rem 0;padding:0.7rem 1rem;text-align:center">
                        Webhook hasn't been converted to the new scope format yet. Please wait for the conversion.
                    </div>
                }
                else
                {
                    <div style="font-size: 0.8rem;background-color: rgba(41,42,45);border-radius: 0.3rem;margin:0.2rem 0;padding:0.7rem 1rem;text-align:center">
                        Ticked means that you will receive reports from this scope.<br/>If you just tick a parent scope without ticking any of the children scopes, you will receive all reports from its child scopes.
                    </div>

                    <ReportScopeSetRenderer Object="Webhook.Scope"></ReportScopeSetRenderer>
                    <button class="button" @onclick="UpdateWebhookAsync">Save changes</button>
                }
            }
        </div>
    </div>
</div>

@code {
    private AccountModel? account;
    private IList<DiscordWebhookModel>? webhooks;

    private const string WebhookDefaultName = "Webhook";

    public bool IsCreate { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    public DiscordWebhookModel? Webhook => Id is not null ? webhooks?.FirstOrDefault(x => x.Guid == Id) : null;

    public string? DisplayNameOnCreate { get; set; }
    public string? WebhookUrlOnCreate { get; set; }
    public bool NotifyWhenAddedOnCreate { get; set; }
    public ReportScopeSet ScopeSet { get; set; } = new ReportScopeSet();

    protected override async Task OnInitializedAsync()
    {
        await UpdateWebhooksAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        DisplayNameOnCreate = WebhookDefaultName;
        WebhookUrlOnCreate = null;

        var temp = Id;
        Id = null;
        StateHasChanged();
        await Task.Delay(1);
        Id = temp;
        StateHasChanged();
    }

    private async Task UpdateWebhooksAsync()
    {
        var (account, webhooksEnumerable) = await WrAuthService.GetDiscordWebhooksAsync();

        webhooks = webhooksEnumerable as IList<DiscordWebhookModel> ?? webhooksEnumerable?.ToList();
    }

    private async Task CreateWebhookAsync()
    {
        var (account, associatedAccount) = await WrAuthService.GetOrCreateAssociatedAccountAsync();

        if (associatedAccount is null)
        {
            return;
        }

        var webhookLimitReached = await WrAuthService.HasReachedWebhookLimitAsync(associatedAccount);

        if (webhookLimitReached)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(DisplayNameOnCreate) || string.IsNullOrWhiteSpace(WebhookUrlOnCreate))
        {
            return;
        }

        if (ScopeSet.IsReportless())
        {
            return;
        }

        var webhook = new DiscordWebhookModel
        {
            Guid = Guid.NewGuid(),
            Account = associatedAccount,
            DisplayName = DisplayNameOnCreate,
            Url = WebhookUrlOnCreate,
            Scope = ScopeSet
        };

        if (!DiscordWebhookService.ValidateWebhook(webhook.Url))
        {
            return;
        }

        await WrUnitOfWork.DiscordWebhooks.AddAsync(webhook);

        await WrUnitOfWork.SaveAsync();

        await UpdateWebhooksAsync();

        IsCreate = false;
        DisplayNameOnCreate = WebhookDefaultName;
        WebhookUrlOnCreate = null;
        ScopeSet = new ReportScopeSet();

        NavManager.NavigateTo($"webhooks/{webhook.Guid}");
    }

    private async Task UpdateEnableAsync(Guid guid, bool enabled)
    {
        // Put this into WrAuthService

        var state = enabled ? "enable" : "disable";

        Logger.LogInformation("Webhook {guid}: '{state}' requested.", guid, state);

        var webhook = await GetAndAuthenticateWebhookAsync(guid);

        if (webhook is null)
        {
            // Webhook should be removed from the list
            return;
        }

        webhook.Disabled = !enabled;

        Logger.LogInformation("Webhook {guid}: State changed to {state} successfully.", guid, state);

        await WrAuthService.SaveAsync();

        //var enable = (bool)checkedValue;

        //using var response = await http.PostAsync(@navigator.BaseUri + $"api/v1/report/webhook/discord/{guid}/" + (enable ? "enable" : "disable"), null);
    }

    private async Task<DiscordWebhookModel?> GetAndAuthenticateWebhookAsync(Guid guid)
    {
        // Check if it still exists
        var webhook = await WrUnitOfWork.DiscordWebhooks.GetByGuidAsync(guid);

        if (webhook is null)
        {
            return null;
        }

        Logger.LogInformation("Webhook {guid}: Exists.", guid);

        account = await AccountService.GetAccountAsync();

        if (account is null || account.Guid != webhook.Account.Guid)
        {
            var accountGuid = account?.Guid.ToString() ?? "[no guid]";
            var webhookOwnerAccountGuid = webhook.Account.Guid;

            Logger.LogWarning("Webhook {guid}: Account doesn't match the webhook owner ({accountGuid} != {webhookOwnerAccountGuid}).", guid, accountGuid, webhookOwnerAccountGuid);

            return null;
        }

        Logger.LogInformation("Webhook {guid}: Account matches the owner.", guid);

        return webhook;
    }

    private async Task PingWebhookAsync(Guid guid)
    {
        // Put this into WrAuthService

        Logger.LogInformation("Webhook {guid}: Ping requested.", guid);

        var webhook = await GetAndAuthenticateWebhookAsync(guid);

        if (webhook is null)
        {
            // Webhook should be removed from the visual list
            return;
        }

        var embed = new Discord.EmbedBuilder()
            .WithTitle("Successfully pinged!")
            .WithFooter("Powered by wr.bigbang1112.cz", "https://bigbang1112.cz/assets/images/logo_small.png")
            .Build();

        var msg = await DiscordWebhookService.SendMessageAsync(webhook, snowflake => new DiscordWebhookMessageModel
        {
            MessageId = snowflake,
            SentOn = DateTime.UtcNow,
            ModifiedOn = DateTime.UtcNow,
            Webhook = webhook
        }, embeds: Enumerable.Repeat(embed, 1));

        if (msg is null)
        {
            Logger.LogInformation("Webhook {guid}: Webhook cannot be reached.", guid);

            await JS.InvokeVoidAsync("alert", "Ping has been processed: Fail.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Ping has been processed: Success!");
        }
    }

    public async Task AskToDeleteWebhookAsync(Guid guid, string displayName)
    {
        await JS.InvokeVoidAsync("deleteWebhook",
            DotNetObjectReference.Create(this),
            nameof(DeleteWebhookAsync),
            guid, displayName);
    }

    [JSInvokable]
    public async Task DeleteWebhookAsync(Guid guid)
    {
        var webhook = await GetAndAuthenticateWebhookAsync(guid);

        if (webhook is null)
        {
            // Webhook should be removed from the visual list
            return;
        }

        WrUnitOfWork.DiscordWebhooks.Delete(webhook);

        await WrUnitOfWork.SaveAsync();

        await UpdateWebhooksAsync();

        StateHasChanged();

        Logger.LogInformation("Webhook {guid}: Deleted.", guid);

        //await JS.InvokeVoidAsync("showNotification", "Webhook deleted", "success");
    }

    private async Task UpdateWebhookAsync()
    {
        if (Webhook is null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(Webhook.DisplayName) || string.IsNullOrWhiteSpace(Webhook.Url))
        {
            return;
        }

        if (!DiscordWebhookService.ValidateWebhook(Webhook.Url))
        {
            return;
        }

        WrUnitOfWork.DiscordWebhooks.Update(Webhook);

        await WrAuthService.SaveAsync();

        await JS.InvokeVoidAsync("alert", "Webhook changes saved!");
    }
}
