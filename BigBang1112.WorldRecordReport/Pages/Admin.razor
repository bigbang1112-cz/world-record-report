@page "/admin"
@using System.Collections

@attribute [Authorize(Roles = "SuperAdmin")]

@inject IWrUnitOfWork _wrUnitOfWork
@inject IDiscordWebhookService _discordWebhookService
@inject TmwrDiscordBotService _tmwr
@inject WrrDiscordBotService _wrr

<button class="button" @onclick="UpdateGlobalDiscordCommandsAsync">Update global commands</button>
<button class="button" @onclick="ClearGlobalDiscordCommandsAsync">Clear global commands</button>
<button class="button" @onclick="UpdateDiscordServerCommandsAsync">Update Discord server commands</button>
<button class="button" @onclick="ClearDiscordServerCommandsAsync">Clear Discord server commands</button>

<input type="text" class="textbox" @bind="command" />

<button @onclick="SendAsync">Send</button>

@code {
    private string? command;
    private bool sending;

    private async Task UpdateGlobalDiscordCommandsAsync()
    {
        await _tmwr.OverwriteGlobalApplicationCommandsAsync();
        await _wrr.OverwriteGlobalApplicationCommandsAsync();
    }

    private async Task ClearGlobalDiscordCommandsAsync()
    {
        await _tmwr.ClearGlobalApplicationCommandsAsync();
        await _wrr.ClearGlobalApplicationCommandsAsync();
    }

    private async Task UpdateDiscordServerCommandsAsync()
    {
        await _tmwr.OverwriteGuildApplicationCommandsAsync();
        await _wrr.OverwriteGuildApplicationCommandsAsync();
    }

    private async Task ClearDiscordServerCommandsAsync()
    {
        await _tmwr.ClearGuildApplicationCommandsAsync();
        await _wrr.ClearGuildApplicationCommandsAsync();
    }

    private async Task SendAsync()
    {
        if (sending)
        {
            return;
        }

        sending = true;

        if (command is null)
        {
            return;
        }

        var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        var partsEnumerator = parts.GetEnumerator();

        if (!partsEnumerator.MoveNext())
        {
            return;
        }

        switch (partsEnumerator.Current)
        {
            case "report":
                await ReportAsync(partsEnumerator);
                break;
            case "commandoverride":
                await _tmwr.OverwriteGuildApplicationCommandsAsync();
                break;
        }
    }

    private async Task ReportAsync(IEnumerator partsEnumerator)
    {
        if (!partsEnumerator.MoveNext())
        {
            return;
        }

        var wrGuid = new Guid((string)partsEnumerator.Current);

        var wrModel = await _wrUnitOfWork.WorldRecords.GetByGuidAsync(wrGuid);

        if (wrModel is null)
        {
            return;
        }

        var report = new ReportModel
        {
            Guid = Guid.NewGuid(),
            Type = ReportModel.EType.NewWorldRecord,
            HappenedOn = DateTime.UtcNow,
            WorldRecord = wrModel
        };

        await _wrUnitOfWork.Reports.AddAsync(report);

        /*Discord.Embed embed;
        if (wrModel.Map.Mode?.Name == NameConsts.MapModeStunts)
            embed = _discordWebhookService.GetDefaultEmbed_NewStuntsWorldRecord(wrModel);
        else
            embed = _discordWebhookService.GetDefaultEmbed_NewWorldRecord(wrModel);

        while (partsEnumerator.MoveNext())
        {
            var webhookGuid = new Guid((string)partsEnumerator.Current);

            var webhookModel = await _repo.GetDiscordWebhookByGuidAsync(webhookGuid);

            if (webhookModel is null)
            {
                return;
            }

            await _discordWebhookService.SendMessageAsync(webhookModel, snowflake => new DiscordWebhookMessageModel
            {
                MessageId = snowflake,
                Report = report,
                SentOn = DateTime.UtcNow,
                ModifiedOn = DateTime.UtcNow,
                Webhook = webhookModel
            }, embeds: Enumerable.Repeat(embed, 1));

            await _repo.SaveAsync();
        }*/
    }
}
