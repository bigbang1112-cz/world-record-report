@page "/account/webhooks/edit/{webhookUUID}"
@attribute [Authorize]

@inject AccountService _accountService
@inject IAccountsRepo _accountsRepo
@inject IWrRepo _wrRepo
@inject WrAuthService _wrAuthService
@inject NavigationManager NavigationManager
@inject IDiscordWebhookService _discordWebhookService
@inject ILogger<AccountWebhooksEdit> _logger

<div class="main-center">
	<div>
		<div class="section">
			<div class="inner">
				<span>Account UUID: <b>@account?.Guid</b></span>
			</div>
		</div>
		<div class="section">
            <div class="inner">
                @if (webhook is null)
                {
                    <span>Webhook not found.</span>
                }
                else
                {
                    <table>
					    <colgroup>
						    <col style="width:45%"/>
						    <col style="width:55%"/>
					    </colgroup>
					    <tbody>
						    <tr>
							    <td>Webhook UUID:</td>
							    <td><small style="font-size: 1rem">@webhook.Guid</small></td>
						    </tr>
						    <tr>
							    <td>Display name:</td>
							    <td><input type="text" class="textbox" @bind="webhook.DisplayName" style="@(string.IsNullOrWhiteSpace(webhook.DisplayName) ? "background-color: indianred" : "")" /></td>
						    </tr>
						    <tr>
							    <td>Webhook URL:</td>
							    <td><input type="password" class="textbox" @bind="webhook.Url" style="@(string.IsNullOrWhiteSpace(webhook.Url) ? "background-color: indianred" : "")" /></td>
						    </tr>
					    </tbody>
				    </table>

                    <table>
					    <caption>Filters</caption>
                        <thead>
                            <tr>
                                <th>TM2</th>
                                <th>TMUF</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <Checkbox @bind-Checked="ReportTMCanyon" Label="TMCanyon" VerySmall></Checkbox>
                                </td>
                                <td>
                                    <Checkbox @bind-Checked="ReportNadeoTMUF" Label="Nadeo TMUF" VerySmall></Checkbox>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <Checkbox @bind-Checked="ReportTMStadium" Label="TMStadium" VerySmall></Checkbox>
                                </td>
                                <td>
                                    <Checkbox @bind-Checked="ReportNadeoTMNF" Label="Nadeo TMNF" VerySmall></Checkbox>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <Checkbox @bind-Checked="ReportTMValley" Label="TMValley" VerySmall></Checkbox>
                                </td>
                                <td>
                                    <Checkbox @bind-Checked="ReportStarTrack" Label="StarTrack" VerySmall></Checkbox>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <Checkbox @bind-Checked="ReportTMLagoon" Label="TMLagoon" VerySmall></Checkbox>
                                </td>
                            </tr>
                        </tbody>
                    </table>

				    <button class="button" style="width: 100%; padding: 0.5rem 3rem" @onclick="EditAsync">Edit</button>
                }
            </div>
		</div>
		<Footer></Footer>
	</div>
</div>

@code {
    private AccountModel? account;
    private DiscordWebhookModel? webhook;

    [Parameter]
    public string? WebhookUUID { get; set; }

    public bool ReportTMCanyon { get; set; }
    public bool ReportTMStadium { get; set; }
    public bool ReportTMValley { get; set; }
    public bool ReportTMLagoon { get; set; }
    public bool ReportNadeoTMUF { get; set; }
    public bool ReportNadeoTMNF { get; set; }
    public bool ReportStarTrack { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (WebhookUUID is null)
        {
            return;
        }

        (account, webhook) = await _wrAuthService.GetDiscordWebhookAsync(new Guid(WebhookUUID));

        if (webhook is null)
        {
            return;
        }

        if (webhook.Filter is null)
        {
            ReportTMCanyon = true;
            ReportTMStadium = true;
            ReportTMValley = true;
            ReportTMLagoon = true;
            ReportNadeoTMUF = true;
            ReportStarTrack = true;
            ReportNadeoTMNF = true;
            return;
        }

        var filter = JsonSerializer.Deserialize<DiscordWebhookFilter>(webhook.Filter);

        if (filter is null)
        {
            return;
        }

        if (filter.ReportTM2 is not null)
        {
            foreach (var tm2filter in filter.ReportTM2)
            {
                switch (tm2filter.TitleId)
                {
                    case "TMCanyon@nadeo":
                        ReportTMCanyon = true;
                        break;
                    case "TMStadium@nadeo":
                        ReportTMStadium = true;
                        break;
                    case "TMValley@nadeo":
                        ReportTMValley = true;
                        break;
                    case "TMLagoon@nadeo":
                        ReportTMLagoon = true;
                        break;
                }
            }
        }

        if (filter.ReportTMUF is not null)
        {
            foreach (var tmuffilter in filter.ReportTMUF)
            {
                switch (tmuffilter.Site)
                {
                    case "united":
                        switch (tmuffilter.UserId)
                        {
                            case 1001:
                                ReportNadeoTMUF = true;
                                break;
                            case 500:
                                ReportStarTrack = true;
                                break;
                        }
                        switch (tmuffilter.LeaderboardType)
                        {
                            case ManiaAPI.TMX.LeaderboardType.Nadeo:
                                ReportNadeoTMUF = true;
                                break;
                            case ManiaAPI.TMX.LeaderboardType.Star:
                                ReportStarTrack = true;
                                break;
                        }
                        break;
                    case "tmnf":
                        switch (tmuffilter.UserId)
                        {
                            case 1001:
                                ReportNadeoTMNF = true;
                                break;
                        }
                        switch (tmuffilter.LeaderboardType)
                        {
                            case ManiaAPI.TMX.LeaderboardType.Nadeo:
                                ReportNadeoTMNF = true;
                                break;
                        }
                        break;
                }
            }
        }
    }

    private async Task EditAsync()
    {
        if (webhook is null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(webhook.DisplayName) || string.IsNullOrWhiteSpace(webhook.Url))
        {
            return;
        }

        using var client = _discordWebhookService.CreateWebhookClient(webhook.Url);

        if (client is null)
        {
            return;
        }

        var filter = webhook.Filter is null ? new DiscordWebhookFilter() : JsonSerializer.Deserialize<DiscordWebhookFilter>(webhook.Filter);

        if (filter is null)
        {
            return;
        }

        var tm2Filters = filter.ReportTM2?.ToList();
        var tmufFilters = filter.ReportTMUF?.ToList();

        if (ReportTMCanyon || ReportTMStadium || ReportTMValley || ReportTMLagoon)
        {
            tm2Filters ??= new List<DiscordWebhookFilter.TM2>();

            tm2Filters.RemoveAll(x => x is DiscordWebhookFilter.TM2 { TitleId: "TMCanyon@nadeo"
                                                                            or "TMStadium@nadeo"
                                                                            or "TMValley@nadeo"
                                                                            or "TMLagoon@nadeo" });

            if (ReportTMCanyon) tm2Filters.Add(new DiscordWebhookFilter.TM2("TMCanyon@nadeo"));
            if (ReportTMStadium) tm2Filters.Add(new DiscordWebhookFilter.TM2("TMStadium@nadeo"));
            if (ReportTMValley) tm2Filters.Add(new DiscordWebhookFilter.TM2("TMValley@nadeo"));
            if (ReportTMLagoon) tm2Filters.Add(new DiscordWebhookFilter.TM2("TMLagoon@nadeo"));
        }
        else
        {
            tm2Filters = null;
        }

        if (ReportNadeoTMUF || ReportStarTrack || ReportNadeoTMNF)
        {
            tmufFilters ??= new List<DiscordWebhookFilter.TMUF>();

            if (ReportNadeoTMUF) tmufFilters.Add(new DiscordWebhookFilter.TMUF("united", LeaderboardType: ManiaAPI.TMX.LeaderboardType.Nadeo));
            if (ReportStarTrack) tmufFilters.Add(new DiscordWebhookFilter.TMUF("united", LeaderboardType: ManiaAPI.TMX.LeaderboardType.Star));
            if (ReportNadeoTMNF) tmufFilters.Add(new DiscordWebhookFilter.TMUF("tmnf", LeaderboardType: ManiaAPI.TMX.LeaderboardType.Nadeo));
        }
        else
        {
            tmufFilters = null;
        }

        if (tm2Filters is null && tmufFilters is null)
        {
            return;
        }

        filter.ReportTM2 = tm2Filters;
        filter.ReportTMUF = tmufFilters;

        webhook.Filter = JsonSerializer.Serialize(filter);

        await _wrRepo.SaveAsync();

        NavigationManager.NavigateTo("/");
    }
}
